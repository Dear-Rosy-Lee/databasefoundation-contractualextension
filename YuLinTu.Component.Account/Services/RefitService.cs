using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using Refit;
using System;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using YuLinTu.Windows;

namespace YuLinTu.Component.Account.Services
{
    public class StreamSerializer : IContentSerializer
    {
        public async Task<T> DeserializeAsync<T>(HttpContent content)
        {
            var streamContent = content as StreamContent;

            return (T)(object)await streamContent.ReadAsByteArrayAsync();
            //using (BinaryReader binReader = new BinaryReader(stream))
            //{
            //    byte[] bytes = binReader.ReadBytes(Convert.ToInt32(stream.Length));

            //    return Convert.ToBase64String(bytes);
            //}
        }

        public Task<HttpContent> SerializeAsync<T>(T item)
        {
            return null;
        }
    }

    public class RefitService
    {
        private static RefitSettings streamSettings = new RefitSettings
        {
            ContentSerializer = new StreamSerializer()
        };

        private static RefitSettings jsonSettings = new RefitSettings
        {
            ContentSerializer = new NewtonsoftJsonContentSerializer(
                   new JsonSerializerSettings
                   {
                       ContractResolver = new CamelCasePropertyNamesContractResolver()
                   }
               )
        };

        private static HttpClientHandler handler = null;

        public static T For<T>(string hostUrl)
        {
            return For<T>(hostUrl, jsonSettings);
        }

        public static T For<T>(string hostUrl, RefitSettings settings)
        {
            var className = "AutoGenerated" + typeof(T).Name;
            var typeName = typeof(T).Namespace + "." + typeof(T).Name.Replace(typeof(T).Name, className);
            var assembly = System.Reflection.Assembly.GetExecutingAssembly();
            var generatedType = assembly.GetType(typeName);

            var requestBuilder = RequestBuilder.ForType<T>(settings);

            var uri = new Uri(hostUrl);
            var client = new HttpClient(GetHandler(uri)) { BaseAddress = uri };
            return (T)Activator.CreateInstance(generatedType, client, requestBuilder);
        }

        private static HttpClientHandler GetHandler(Uri uri)
        {
            if (handler != null)
            {
                var cookieSession = handler.CookieContainer.GetCookies(uri)["SESSION"];
                var currentSession = TheApp.Current.GetWorkspaceUserSessionCode();
                if (currentSession != null && cookieSession?.Value != currentSession?.ToString("D"))
                {
                    handler.CookieContainer.Add(uri, new Cookie("SESSION", currentSession?.ToString("D")));
                }
                return handler;
            }
            else
            {
                handler = new HttpClientHandler();
                var cookieContainer = handler.CookieContainer;
                if (cookieContainer is null)
                {
                    cookieContainer = new CookieContainer();
                    cookieContainer.Add(uri, new CookieCollection());

                    var session = TheApp.Current.GetWorkspaceUserSessionCode();
                    cookieContainer.Add(uri, new Cookie("SESSION", session?.ToString("D")));
                }
                return handler;
            }
        }
    }

    //public class DeliminatorSeparatedPropertyNamesContractResolver : DefaultContractResolver
    //{
    //    private readonly string separator;

    //    protected DeliminatorSeparatedPropertyNamesContractResolver(char separator)
    //    {
    //        this.separator = separator.ToString(CultureInfo.InvariantCulture);
    //    }

    //    protected override string ResolvePropertyName(string propertyName)
    //    {
    //        var parts = new List<string>();
    //        var currentWord = new StringBuilder();

    //        foreach (var c in propertyName.ToCharArray())
    //        {
    //            if (Char.IsUpper(c) && currentWord.Length > 0)
    //            {
    //                parts.Add(currentWord.ToString());
    //                currentWord.Clear();
    //            }

    //            currentWord.Append(char.ToLower(c));
    //        }

    //        if (currentWord.Length > 0)
    //        {
    //            parts.Add(currentWord.ToString());
    //        }

    //        return String.Join(separator, parts.ToArray());
    //    }
    //}

    //public class SnakeCasePropertyNamesContractResolver : DeliminatorSeparatedPropertyNamesContractResolver
    //{
    //    public SnakeCasePropertyNamesContractResolver() : base('_')
    //    {
    //    }
    //}
}